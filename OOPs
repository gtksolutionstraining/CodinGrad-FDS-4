Its a Programming Style
This Programming Style drives from data.

Advantages:
1. Scalable
2. Extendable
3. Robustness
4. Security & Privacy --> Each component is private to itself
5. Isolation   ---> Isolated components   
6. Integration --> Relationship between components
7. Mainatainbility

Disadvatages:
1. Hard to learn, hard to write.

Component: Entity: Class

--> Blueprint --> Is defined by properties and actions of the entity
--> Class is a blueprint. --> Logical Entity 
--> Object is an instance of a class --> Physical Entity

--> OOP is a style of programming and our most focus is on defining and organizing objects efficiently.

OOPs Concepts:
1. Class
2. Object
3. Member Variables
4. Member Functions
5. Encapsulation
6. Abstraction
7. Inheritance
8. Static Polymorphism
9. Dynamic Polymorphism

Member Variables --> Attributes --> Parameters --> Fields --> Columns --> Variables --> Features --> Properties --> Properties of an entity

Member Functions --> Actions of an entity

4 Blocks of memory --> Stack, Heap, Global, Static
** Variables --> Stack
** functions --> Stack
** Recursion --> Stack --> Stack Overflow
** All objects stored in Heap Area of the RAM

***** Decorator: Wrapper ==> Adding an extra functionality to an existing functionaility


1. Constructor
2. Instance Variables
3. Class Variables
4. Instance Methods
5. Class Methods
6. Static Methods

1. Constructor: ==> Construction/Creation of the object using instance variables.
** Scope of an object
    1. All instance variables are under the scope of an individual object.
    2. All instance methods are under the scope of an individual object.
    3. All class variables are under the scope of class, and objects --> shared memory
    4. All class methods are under the scope of class, and objects --> shared actions

2. Constructor Overloading: Its not in Python
    class Human{
        ## Default Constructor
    }
    class Human{
        Human(){
        ## Constructor with no arguments
        }
        Human(eyes,nose){
        ## Constructor wiith arguments
        }
        Human(Human *human){
        ## Copy Constructor
        }
    }
    
3. Function Overloading --> 

    int add(int a,int b){
        return a+b
    }
    int add(int a,int b,int c){
        return a+b+c
    }
    float add(float a, float b){
        return a+b
    }

    Addition
    Travelling

    sum = add(1,2)
    sum = add(1.2,1.3)
    sum = add(1,2,3)

Access Specifiers: Restricted scope.
1. Private --> Are scoped under individual class object, only inside the class
2. Protected --> Are scoped under individual class object, Accesses inside another class which was been inherited by the object class.
3. Public --> Are scoped under individual class object, Accessible from any place in the program.

Encapsulation: Binding of Data & Functions.

Abstraction: Hiding Information

Interitance: Inheriting member variables and member functions from the base class

--> Base Class: Parent Class: 
--> Child Class: Sub Class:

--> Inheritance is usefull in reusing the functionality 
--> Single Level Inheritance Only one child class, which inherits only one base class
--> Multi Level Inheritance --> Chain Inheritance A->B->C
--> Multiple Inheritance --> A,B --> C(A,B)
--> Hierarchial Inheritance
--> Hybrid Inheritance

--> All public, protected properties and actions only will be accessible in Inherited class
--> Private properties and actions won't be accessible in inherited classes

